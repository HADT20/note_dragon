const mysql = require('mysql2/promise');
require('dotenv').config({ path: '.env.local' });

async function testConnection() {
  console.log('üîç ƒêang ki·ªÉm tra k·∫øt n·ªëi database...\n');

  // Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh (·∫©n password)
  console.log('üìã Th√¥ng tin k·∫øt n·ªëi:');
  console.log('   Host:', process.env.DB_HOST || 'localhost');
  console.log('   Port:', process.env.DB_PORT || '3306');
  console.log('   User:', process.env.DB_USER || 'root');
  console.log('   Password:', process.env.DB_PASSWORD ? '***' + process.env.DB_PASSWORD.slice(-3) : '(empty)');
  console.log('   Database:', process.env.DB_NAME || 'vozee_db');
  console.log('   SSL:', process.env.DB_SSL || 'false');
  console.log('');

  try {
    // T·∫°o c·∫•u h√¨nh k·∫øt n·ªëi
    const config = {
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'vozee_db',
      timezone: '+07:00',
      charset: 'utf8mb4'
    };

    // Th√™m SSL n·∫øu c·∫ßn
    if (process.env.DB_SSL === 'true') {
      config.ssl = {
        rejectUnauthorized: process.env.DB_SSL_REJECT_UNAUTHORIZED !== 'false'
      };
    }

    // K·∫øt n·ªëi
    console.log('‚è≥ ƒêang k·∫øt n·ªëi...');
    const connection = await mysql.createConnection(config);
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!\n');

    // Test query
    console.log('üîç Ki·ªÉm tra database...');
    const [tables] = await connection.query('SHOW TABLES');
    console.log(`‚úÖ T√¨m th·∫•y ${tables.length} b·∫£ng:\n`);
    
    if (tables.length > 0) {
      tables.forEach((table, index) => {
        const tableName = Object.values(table)[0];
        console.log(`   ${index + 1}. ${tableName}`);
      });
      console.log('');
    } else {
      console.log('   ‚ö†Ô∏è  Ch∆∞a c√≥ b·∫£ng n√†o. H√£y ch·∫°y script init.sql\n');
    }

    // Ki·ªÉm tra b·∫£ng users
    try {
      const [users] = await connection.query('SELECT COUNT(*) as count FROM users');
      console.log(`üë• S·ªë l∆∞·ª£ng users: ${users[0].count}`);
      
      if (users[0].count > 0) {
        const [adminCheck] = await connection.query(
          "SELECT username, role FROM users WHERE role = 'admin' LIMIT 1"
        );
        if (adminCheck.length > 0) {
          console.log(`‚úÖ T√¨m th·∫•y admin: ${adminCheck[0].username}`);
        } else {
          console.log('‚ö†Ô∏è  Ch∆∞a c√≥ admin. H√£y ch·∫°y script create-admin.sql');
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  B·∫£ng users ch∆∞a t·ªìn t·∫°i. H√£y ch·∫°y script init.sql');
    }

    console.log('');

    // Ki·ªÉm tra c√°c b·∫£ng kh√°c
    const requiredTables = ['users', 'short_links', 'notes', 'qr_codes'];
    const existingTables = tables.map(t => Object.values(t)[0]);
    const missingTables = requiredTables.filter(t => !existingTables.includes(t));

    if (missingTables.length > 0) {
      console.log('‚ö†Ô∏è  C√°c b·∫£ng c√≤n thi·∫øu:');
      missingTables.forEach(table => {
        console.log(`   - ${table}`);
      });
      console.log('\nüí° Ch·∫°y l·ªánh sau ƒë·ªÉ t·∫°o c√°c b·∫£ng:');
      console.log(`   mysql -h ${config.host} -P ${config.port} -u ${config.user} -p ${config.database} < database/init.sql\n`);
    } else {
      console.log('‚úÖ T·∫•t c·∫£ c√°c b·∫£ng ƒë√£ s·∫µn s√†ng!\n');
    }

    // ƒê√≥ng k·∫øt n·ªëi
    await connection.end();
    console.log('‚úÖ Test ho√†n t·∫•t!\n');

    // H∆∞·ªõng d·∫´n ti·∫øp theo
    console.log('üìù C√°c b∆∞·ªõc ti·∫øp theo:');
    if (missingTables.length > 0) {
      console.log('   1. Ch·∫°y script init.sql ƒë·ªÉ t·∫°o c√°c b·∫£ng');
      console.log('   2. Ch·∫°y script create-admin.sql ƒë·ªÉ t·∫°o admin');
    } else {
      console.log('   1. Ch·∫°y: npm run dev');
      console.log('   2. Truy c·∫≠p: http://localhost:3000');
      console.log('   3. ƒêƒÉng nh·∫≠p v·ªõi admin/Admin@123');
    }
    console.log('');

  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi:\n');
    console.error('   Message:', error.message);
    console.error('   Code:', error.code);
    console.error('');
    
    // G·ª£i √Ω gi·∫£i ph√°p
    console.log('üí° G·ª£i √Ω gi·∫£i ph√°p:\n');
    
    if (error.code === 'ECONNREFUSED') {
      console.log('   - Ki·ªÉm tra MySQL server ƒë√£ ch·∫°y ch∆∞a');
      console.log('   - Ki·ªÉm tra host v√† port c√≥ ƒë√∫ng kh√¥ng');
      console.log('   - Ki·ªÉm tra firewall c√≥ ch·∫∑n k·∫øt n·ªëi kh√¥ng');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('   - Ki·ªÉm tra username v√† password');
      console.log('   - Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p database kh√¥ng');
    } else if (error.code === 'ER_BAD_DB_ERROR') {
      console.log('   - Database ch∆∞a t·ªìn t·∫°i');
      console.log('   - T·∫°o database tr∆∞·ªõc khi k·∫øt n·ªëi');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('   - K·∫øt n·ªëi timeout');
      console.log('   - Ki·ªÉm tra network/firewall');
      console.log('   - Th√™m IP v√†o whitelist (n·∫øu d√πng cloud database)');
    } else if (error.code === 'ENOTFOUND') {
      console.log('   - Host kh√¥ng t·ªìn t·∫°i');
      console.log('   - Ki·ªÉm tra l·∫°i DB_HOST trong .env.local');
    }
    
    console.log('');
    process.exit(1);
  }
}

testConnection();

